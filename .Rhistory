install.packages("sf") # datos vectoriales y rgee depende
install.packages("mapedit") # mapas interactivos
install.packages("tmap") # mapas tematicos
#install.packages("numpy")
install.packages("remotes")
install.packages("remotes")
remotes::install_github("r-spatial/rgee")
library(rgee)
ee_check()
ee_Initialize('ee-urielzan')
ee_Authenticate()
ee_Authenticate()
ee_Initialize('ee-urielzan')
ee_clean_user_credentials()
ee_Authenticate()
ee_Initialize('ee-urielzan')
Sys.setenv(RETICULATE_PYTHON = "C:/Users/urielm/anaconda3/envs/r-reticulate/python.exe")
library(reticulate)
py_config()
library(rgee)
ee_check()
ee_Authenticate()
ee_Initialize('ee-urielzan')
ee_clean_user_credentials()
ee_Authenticate()
install.packages('reticulate')
library(reticulate)
use_condaenv("rgee_test", required = TRUE)
py_config()
install.packages("sf") # datos vectoriales y rgee depende
install.packages("mapedit") # mapas interactivos
install.packages("tmap") # mapas tematicos
#install.packages("numpy")
install.packages("remotes")
install.packages("remotes")
remotes::install_github("r-spatial/rgee", force = TRUE)
library(rgee)
ee_check()
ee_clean_user_credentials()
ee_Authenticate()
ee_Initialize('ee-urielzan')
reticulate::py_available()
reticulate::py_available()
reticulate::py_discover_config()
# STEP 1
install.packages("rgee")
library(rgee)
install.packages("rgee")
# STEP 1
install.packages("rgee")
library(rgee)
# STEP 2
install.packages("reticulate")
library(reticulate)
install.packages("reticulate")
# STEP 3
reticulate::py_available()
reticulate::py_discover_config()
# STEP 4
rgee::ee_install_set_pyenv(
py_path = "C:/Users/urielm/anaconda3/envs/r-reticulate/python.exe", # PLEASE SET YOUR OWN PATH
py_env = "rgee"
)
# STEP 5
rgee::ee_check()
# initialize Earth Engine
rgee::ee_Initialize(
user = "urielmendozacastillo@gmail" # PLEASE SET YOUR OWN CREDENTIALS
)
ee_Authenticate()
reticulate::py_run_string("import ee; ee.Initialize()")
reticulate::py_run_string("print(ee.version)")
reticulate::py_run_string("import ee; ee.Initialize()")
createTimeBand <-function(img) {
year <- ee$Date(img$get('system:time_start'))$get('year')$subtract(1991L)
ee$Image(year)$byte()$addBands(img)
}
collection <- ee$
ImageCollection('NOAA/DMSP-OLS/NIGHTTIME_LIGHTS')$
select('stable_lights')$
map(createTimeBand)
collection <- ee$
ImageCollection('NOAA/DMSP-OLS/NIGHTTIME_LIGHTS')$
select('stable_lights')$
map(createTimeBand)
library(reticulate)
library(rgee)
# 1. Initialize the Python Environment
ee_Initialize()
# 2. Install geemap in the same Python ENV that use rgee
py_install("geemap")
Sys.which('make')
install.packages('reticulate')
reticulate::py_available()
reticulate::py_discover_config()
library(reticulate)
use_condaenv("rgee_test", required = TRUE)
py_config()
library(reticulate)
use_condaenv("r-reticulate", required = TRUE)
library(reticulate)
use_condaenv("rgee_test", required = TRUE)
py_config()
install.packages("sf") # datos vectoriales y rgee depende
install.packages("mapedit") # mapas interactivos
install.packages("tmap") # mapas tematicos
#install.packages("numpy")
install.packages("remotes")
install.packages("remotes")
remotes::install_github("r-spatial/rgee", force = TRUE)
library(reticulate)
use_condaenv("rgee_test", required = TRUE)
py_config()
remotes::install_github("r-spatial/rgee", force = TRUE)
library(rgee)
ee_check()
ee_clean_user_credentials()
ee_Authenticate()
4/1AanRRruKBNAUVSDDhx2YRkrBKtcPvjGUMQjnTXxBoJ3C9AjhqV9TiTOVWq4
ee_Initialize('ee-urielzan')
4/1AanRRru0fRuBsinSS9Kd9ddm1ogEtQe2VMBa3qDXtr4yjYShFoqDQ64ldBY
createTimeBand <-function(img) {
year <- ee$Date(img$get('system:time_start'))$get('year')$subtract(1991L)
ee$Image(year)$byte()$addBands(img)
}
collection <- ee$
ImageCollection('NOAA/DMSP-OLS/NIGHTTIME_LIGHTS')$
select('stable_lights')$
map(createTimeBand)
collection <- ee$
ImageCollection('NOAA/DMSP-OLS/NIGHTTIME_LIGHTS')$
select('stable_lights')$
map(createTimeBand)
col_reduce <- collection$reduce(ee$Reducer$linearFit())
col_reduce <- col_reduce$addBands(
col_reduce$select('scale'))
ee_print(col_reduce)
install.packages("geojsonio")
col_reduce <- collection$reduce(ee$Reducer$linearFit())
col_reduce <- col_reduce$addBands(
col_reduce$select('scale'))
ee_print(col_reduce)
Map$setCenter(9.08203, 47.39835, 3)
Map$addLayer(
eeObject = col_reduce,
visParams = list(
bands = c("scale", "offset", "scale"),
min = 0,
max = c(0.18, 20, -0.18)
),
name = "stable lights trend"
)
Map$setCenter(9.08203, 47.39835, 3)
Map$addLayer(
eeObject = col_reduce,
visParams = list(
bands = c("scale", "offset", "scale"),
min = 0,
max = c(1, 20, -0.18)
),
name = "stable lights trend"
)
Map$setCenter(9.08203, 47.39835, 3)
Map$addLayer(
eeObject = col_reduce,
visParams = list(
bands = c("scale", "offset", "scale"),
min = 0,
max = c(0.18, 20, -0.18)
),
name = "stable lights trend"
)
library(tidyverse)
library(rgee)
library(sf)
ee_Initialize("ee-urielzan")
nc <- st_read(system.file("tabasco/tabasco.shp", package = "sf"), quiet = TRUE)
nc <- st_read(system.file("./tabasco/tabasco.shp", package = "sf"), quiet = TRUE)
nc <- st_read(system.file("C:/Users/urielm/Documents/GitHub/Rladies_taller_rgee/tabasco/tabasco.shp", package = "sf"), quiet = TRUE)
nc <- st_read("C:/Users/urielm/Documents/GitHub/Rladies_taller_rgee/tabasco/tabasco.shp", quiet = TRUE)
terraclimate <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate("2001-01-01", "2002-01-01") %>%
ee$ImageCollection$map(function(x) x$select("pr")) %>% # Select only precipitation bands
ee$ImageCollection$toBands() %>% # from imagecollection to image
ee$Image$rename(sprintf("PP_%02d",1:12)) # rename the bands of an image
ee_nc_rain <- ee_extract(x = terraclimate, y = nc["NAME"], sf = FALSE)
ee_nc_rain <- ee_extract(x = terraclimate, y = nc["ENTIDAD"], sf = FALSE)
ee_nc_rain %>%
pivot_longer(-NAME, names_to = "month", values_to = "pr") %>%
mutate(month, month=gsub("PP_", "", month)) %>%
ggplot(aes(x = month, y = pr, group = NAME, color = pr)) +
geom_line(alpha = 0.4) +
xlab("Month") +
ylab("Precipitation (mm)") +
theme_minimal()
ee_nc_rain %>%
pivot_longer(-ENTIDAD, names_to = "month", values_to = "pr") %>%
mutate(month, month=gsub("PP_", "", month)) %>%
ggplot(aes(x = month, y = pr, group = NAME, color = pr)) +
geom_line(alpha = 0.4) +
xlab("Month") +
ylab("Precipitation (mm)") +
theme_minimal()
ee_nc_rain %>%
pivot_longer(-ENTIDAD, names_to = "month", values_to = "pr") %>%
mutate(month, month=gsub("PP_", "", month)) %>%
ggplot(aes(x = month, y = pr, group = ENTIDAD, color = pr)) +
geom_line(alpha = 0.4) +
xlab("Month") +
ylab("Precipitation (mm)") +
theme_minimal()
terraclimate <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate("1960-01-01", "2022-01-01") %>%
ee$ImageCollection$map(function(x) x$select("pr")) %>% # Select only precipitation bands
ee$ImageCollection$toBands() %>% # from imagecollection to image
ee$Image$rename(sprintf("PP_%02d",1:12)) # rename the bands of an image
ee_nc_rain <- ee_extract(x = terraclimate, y = nc["ENTIDAD"], sf = FALSE)
terraclimate <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate("1960-01-01", "2022-01-01") %>%
ee$ImageCollection$map(function(x) x$select("pr")) %>% # Select only precipitation bands
ee$ImageCollection$toBands() %>% # from imagecollection to image
ee$Image$rename(sprintf("PP_%02d",1:744)) # rename the bands of an image
ee_nc_rain <- ee_extract(x = terraclimate, y = nc["ENTIDAD"], sf = FALSE)
ee_nc_rain %>%
pivot_longer(-ENTIDAD, names_to = "month", values_to = "pr") %>%
mutate(month, month=gsub("PP_", "", month)) %>%
ggplot(aes(x = month, y = pr, group = ENTIDAD, color = pr)) +
geom_line(alpha = 0.4) +
xlab("Month") +
ylab("Precipitation (mm)") +
theme_minimal()
terraclimate <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate("2001-01-01", "2002-01-01") %>%
ee$ImageCollection$map(function(x) x$select("pr")) %>% # Select only precipitation bands
ee$ImageCollection$toBands() %>% # from imagecollection to image
ee$Image$rename(sprintf("PP_%02d",1:12)) # rename the bands of an image
ee_nc_rain <- ee_extract(x = terraclimate, y = nc["ENTIDAD"], sf = FALSE)
ee_nc_rain %>%
pivot_longer(-ENTIDAD, names_to = "month", values_to = "pr") %>%
mutate(month, month=gsub("PP_", "", month)) %>%
ggplot(aes(x = month, y = pr, group = ENTIDAD, color = pr)) +
geom_line(alpha = 0.4) +
xlab("Month") +
ylab("Precipitation (mm)") +
theme_minimal()
library(magick)
install.packages("magick")
library(magick)
library(rgee)
library(sf)
ee_Initialize("ee-urielzan")
mask <- system.file("tabasco/tabasco.shp", package = "rgee") %>%
st_read(quiet = TRUE) %>%
sf_as_ee()
mask <- system.file("C:/Users/urielm/Documents/GitHub/Rladies_taller_rgee/tabasco/tabasco.shp", package = "rgee") %>%
st_read(quiet = TRUE) %>%
sf_as_ee()
# Cargar el shapefile directamente
mask <- st_read("C:/Users/urielm/Documents/GitHub/Rladies_taller_rgee/tabasco/tabasco.shp", quiet = TRUE) %>%
sf_as_ee()
# Obtener la geometría de los límites
region <- mask$geometry()$bounds()
col <- ee$ImageCollection('MODIS/006/MOD13A2')$select('NDVI')
col <- col$map(function(img) {
doy <- ee$Date(img$get('system:time_start'))$getRelative('day', 'year')
img$set('doy', doy)
})
distinctDOY <- col$filterDate('2013-01-01', '2014-01-01')
filter <- ee$Filter$equals(leftField = 'doy', rightField = 'doy')
join <- ee$Join$saveAll('doy_matches')
joinCol <- ee$ImageCollection(join$apply(distinctDOY, col, filter))
comp <- joinCol$map(function(img) {
doyCol = ee$ImageCollection$fromImages(
img$get('doy_matches')
)
doyCol$reduce(ee$Reducer$median())
})
visParams = list(
min = 0.0,
max = 9000.0,
bands = "NDVI_median",
palette = c(
'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',
'66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',
'012E01', '011D01', '011301'
)
)
rgbVis <- comp$map(function(img) {
do.call(img$visualize, visParams) %>%
ee$Image$clip(mask)
})
gifParams <- list(
region = region,
dimensions = 600,
crs = 'EPSG:3857',
framesPerSecond = 10
)
dates_modis_mabbr <- distinctDOY %>%
ee_get_date_ic %>% # Get Image Collection dates
'[['("time_start") %>% # Select time_start column
lubridate::month() %>% # Get the month component of the datetime
'['(month.abb, .) # subset around month abbreviations
animation <- ee_utils_gif_creator(rgbVis, gifParams, mode = "wb")
ls("package:rgee", pattern = "ee_utils
library(magick)
# Carga las imágenes en una lista
images <- list.files(path = "C:/Users/urielm/Documents/GitHub/Rladies_taller_rgee/images", pattern = "\\.png$", full.names = TRUE)
library(magick)
# Carga las imágenes en una lista
images <- list.files(path = "C:\Users\urielm\Documents\GitHub\Rladies_taller_rgee\images", pattern = "\\.png$", full.names = TRUE)
library(magick)
# Carga las imágenes en una lista
images <- list.files(path = "C:\\Users\\urielm\\Documents\\GitHub\\Rladies_taller_rgee\\images", pattern = "\\.png$", full.names = TRUE)
# Crea un GIF a partir de las imágenes
gif <- image_read(images) %>%
image_animate(fps = 10) %>% # Configura los cuadros por segundo
image_write("output.gif")   # Guarda el GIF
library(magick)
# Carga las imágenes en una lista
images <- list.files(path = "C:\\Users\\urielm\\Documents\\GitHub\\Rladies_taller_rgee\\images", pattern = "\\.png$", full.names = TRUE)
# Crea un GIF a partir de las imágenes
gif <- image_read(images) %>%
image_animate(fps = 10) %>% # Configura los cuadros por segundo
image_write("output.gif")   # Guarda el GIF
animation <- ee_utils_gif_creator(rgbVis, gifParams, mode = "wb")
library(magick)
library(rgee)
library(sf)
ee_Initialize("ee-urielzan")
animation <- ee_utils_gif_creator(rgbVis, gifParams, mode = "wb")
animation <- ee_utils_gif_creator(rgbVis, gifParams, mode = "wb")
animation <- ee_utils_gif_creator(rgbVis, gifParams, mode = "wb")
animation <- ee_utils_gif_creator(rgbVis, gifParams, mode = "wb")
animation <- ee_utils_gif_creator(rgbVis, gifParams, mode = "wb")
mask <- system.file("C:/Users/urielm/Documents/GitHub/Rladies_taller_rgee/tabasco/tabasco.shp", package = "rgee") %>%
st_read(quiet = TRUE) %>%
sf_as_ee()
library(sf)
library(rgee)
# Cargar shapefile directamente con la ruta absoluta
mask <- st_read("C:/Users/urielm/Documents/GitHub/Rladies_taller_rgee/tabasco/tabasco.shp", quiet = TRUE) %>%
sf_as_ee()
# Obtener los límites de la geometría
region <- mask$geometry()$bounds()
col <- ee$ImageCollection('MODIS/006/MOD13A2')$select('NDVI')
col <- col$map(function(img) {
doy <- ee$Date(img$get('system:time_start'))$getRelative('day', 'year')
img$set('doy', doy)
})
distinctDOY <- col$filterDate('2013-01-01', '2014-01-01')
filter <- ee$Filter$equals(leftField = 'doy', rightField = 'doy')
join <- ee$Join$saveAll('doy_matches')
joinCol <- ee$ImageCollection(join$apply(distinctDOY, col, filter))
comp <- joinCol$map(function(img) {
doyCol = ee$ImageCollection$fromImages(
img$get('doy_matches')
)
doyCol$reduce(ee$Reducer$median())
})
visParams = list(
min = 0.0,
max = 9000.0,
bands = "NDVI_median",
palette = c(
'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',
'66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',
'012E01', '011D01', '011301'
)
)
rgbVis <- comp$map(function(img) {
do.call(img$visualize, visParams) %>%
ee$Image$clip(mask)
})
gifParams <- list(
region = region,
dimensions = 600,
crs = 'EPSG:3857',
framesPerSecond = 10
)
dates_modis_mabbr <- distinctDOY %>%
ee_get_date_ic %>% # Get Image Collection dates
'[['("time_start") %>% # Select time_start column
lubridate::month() %>% # Get the month component of the datetime
'['(month.abb, .) # subset around month abbreviations
animation <- ee_utils_gif_creator(rgbVis, gifParams, mode = "wb")
animation <- rgee::ee_utils_gif_creator(rgbVis, gifParams, mode = "wb")
animation <- ee_utils_gif_creator(rgbVis, gifParams, mode = "wb")
animation <- ee_utils_gif_creator(rgbVis, gifParams, mode = "wb")
remotes::install_github("r-spatial/rgee")
remotes::install_github("r-spatial/rgee", force=TRUE)
animation <- ee_utils_gif_creator(rgbVis, gifParams, mode = "wb")
library(ggplot2)
library(gganimate)
installed.packages("gganimate")
library(ggplot2)
library(gganimate)
install.packages("gganimate")
library(ggplot2)
library(gganimate)
# Crear un data frame de ejemplo
df <- data.frame(
x = rep(1:10, each = 5),
y = runif(50),
frame = rep(1:5, times = 10)
)
# Crear la animación
p <- ggplot(df, aes(x = x, y = y, color = factor(frame))) +
geom_point(size = 3) +
theme_minimal() +
transition_states(frame, transition_length = 2, state_length = 1)
# Guardar como GIF
anim_save("example.gif", p)
# Crear la animación
p <- ggplot(ndvi_df, aes(x = time, y = NDVI)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 2) +
labs(title = "NDVI Time Series for Tabasco, Mexico",
x = "Date",
y = "NDVI") +
theme_minimal() +
transition_reveal(time)
# Definir una región de interés (ejemplo: un shapefile)
roi <- st_read("C:/Users/urielm/Documents/GitHub/Rladies_taller_rgee/tabasco/tabasco.shp") %>%
sf_as_ee()
# Cargar colección de NDVI (MODIS)
ndvi_collection <- ee$ImageCollection("MODIS/006/MOD13A2")$
select("NDVI")$
filterBounds(roi)$
filterDate("2020-01-01", "2020-12-31")
# Reducir la colección a una serie temporal en tu región
ndvi_series <- ndvi_collection$map(function(img) {
img$reduceRegion(
reducer = ee$Reducer$mean(),
geometry = roi,
scale = 500
)$set("system:time_start", img$get("system:time_start"))
})
# Convertir a un DataFrame en R
ndvi_df <- ee_as_dataframe(ndvi_series, time_start = "system:time_start")
# Definir la región de interés (ROI) usando un shapefile
roi <- st_read("C:/Users/urielm/Documents/GitHub/Rladies_taller_rgee/tabasco/tabasco.shp") %>%
sf_as_ee()
# Cargar la colección de NDVI (MODIS)
ndvi_collection <- ee$ImageCollection("MODIS/006/MOD13A2")$
select("NDVI")$
filterBounds(roi)$
filterDate("2020-01-01", "2020-12-31")
# Reducir la colección a una serie temporal en la ROI
ndvi_list <- ndvi_collection$map(function(img) {
mean_ndvi <- img$reduceRegion(
reducer = ee$Reducer$mean(),
geometry = roi,
scale = 500
)$set("system:time_start", img$get("system:time_start"))
mean_ndvi
})
# Convertir la lista de Google Earth Engine a datos en R
ndvi_data <- ndvi_list$getInfo()
# Definir la región de interés (ROI) usando un shapefile
roi <- st_read("C:/Users/urielm/Documents/GitHub/Rladies_taller_rgee/tabasco/tabasco.shp") %>%
sf_as_ee()
# Cargar la colección de NDVI (MODIS)
ndvi_collection <- ee$ImageCollection("MODIS/006/MOD13A2")$
select("NDVI")$
filterBounds(roi)$
filterDate("2020-01-01", "2020-12-31")
# Reducir la colección a una serie temporal en la ROI
ndvi_series <- ndvi_collection$map(function(img) {
# Reducir la región (obtener el promedio de NDVI)
mean_ndvi <- img$reduceRegion(
reducer = ee$Reducer$mean(),
geometry = roi,
scale = 500
)
# Asignar el valor de NDVI promedio como una propiedad del objeto imagen
img$set(mean_ndvi)$set("system:time_start", img$get("system:time_start"))
})
# Convertir la colección de imágenes en una tabla con propiedades
ndvi_table <- ndvi_series$reduceColumns(
reducer = ee$Reducer$toList(2),
selectors = c("system:time_start", "NDVI")
)
# Obtener los datos como una lista en R
ndvi_data <- ndvi_table$getInfo()
# Convertir los datos en un DataFrame
ndvi_df <- data.frame(
time = as.numeric(ndvi_data$list[[1]]),
NDVI = as.numeric(ndvi_data$list[[2]])
)
# Escalar NDVI y convertir fechas
ndvi_df <- ndvi_df %>%
mutate(
time = as.Date(time / 1000, origin = "1970-01-01"),
NDVI = NDVI * 0.0001
) %>%
drop_na()
# Verifica los datos
print(head(ndvi_df))
# Crear la animación de la serie temporal
p <- ggplot(ndvi_df, aes(x = time, y = NDVI)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 2) +
labs(title = "NDVI Time Series for Tabasco, Mexico",
x = "Date",
y = "NDVI") +
theme_minimal() +
transition_reveal(time)
# Guardar la animación como GIF
anim_save("ndvi_animation.gif", p, fps = 10)
# Mensaje final
cat("¡Animación NDVI creada y guardada como 'ndvi_animation.gif'!\n")
animation <- ee_utils_gif_creator(rgbVis, gifParams, mode = "wb")
